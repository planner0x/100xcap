import pandas as pd
import numpy as np

class LRVectorBacktester(object):
    def __init__(self,close,start,end,amount,tc):
        self.close = close
        self.start = start
        self.end = end
        self.amount = amount
        self.tc = tc
        self.result = None
        self.get_data()

    def get_data(self):
        raw = pd.read_csv('BITFINEX_ETHUSD, 1D.csv').dropna()
        raw = pd.DataFrame(raw[self.close])
        raw = raw.loc[self.start:self.end]
        raw.rename(columns={self.close:'price'},inplace = True)
        raw['returns'] = np.log(raw/raw.shift(1))
        self.data = raw.dropna()

    def select_data(self,start,end):
        data = self.data [(self.data.index >= start) & (self.data.index <= end)].copy()
        return data

    def prepare_lags(self,start,end):
        data = self.select_data(start,end)
        self.cols=[]
        for lag in range(1, self.lags + 1):
            col = f'lag_{lag}'
            data[col] = data['returns'].shift(lag)
            self.lagged_data = data

    def fit_model(self,start,end):
        self.prepare_lags(start,end)
        reg = np.linalg.lstsq(self.lagged_data[self.cols],np.sign(self.lagged_data['returns']), rcond = None)[0]
        self.reg = reg

    def run_strategy(self, start_in, end_in, start_out, end_out, lags=3):
        self.lags = lags
        self.fit_models(start_in,end_in)
        self.results = self.select_data(start_out,end_out).iloc[lags:]
        self.prepare_lags(start_out,end_out)
        predicion = np.sign(np.dot(self.lagged_data[self.cols],self.reg))
        self.results['prediction'] = prediction
        self.results['strategy'] = self.results['prediction'] * self.results['returns']
        trades = self.returns['returns'].diff().fillna(0) !=0
        self.results['strategy'][trades] -= self.tc
        self.results['creturns'] = self.amount *  self.results['returns'].cumsum().apply(np.exp)
        self.results['cstrategy'] = self.amount * self.results['strategy'].cumsum().apply(np.exp)
        #gross performance of strategy
        aperf = self.results['cstrategy'].iloc[-1]
        # out-/underperformance of strategy
        operf = aperf - self.results['creturns'].iloc[-1]
        return round(aperf , 2), round(operf, 2)
    def plot_results(self):
        if self.result is None:
            print('No result to plot yet. Run a strategy.')
        title = '%s | TC = %.4f'%(self.symbol,self.tc)
        self.results[['creturns','cstrategy']].plot(title=title, figsize=(10,6))

    if __name__ == '__main__':
        lbrt = LRVectorBacktester('close','2016-06-25','2018-12-31',100000,0.0)
        print(lrbt.run_strategy('2016-06-25','2019-12-31','2016-05-25','2019-12-31'))
        print(lrbt.run_stratgy('2016-06-25','2018-12-31','2019-1-1','2019-12-31'))
